35 CPSR, Current Program Status Register./nHolds PE status and control information.
132 FPCR, Floating-point Control Register./nControls behavior of the floating-point instructions.
133 FPSR, Floating-point Status Register./nProvides floating-point system status information.
134 N, bit [31] Negative condition flag./nSet to bit[31] of the result of the last flag-setting instruction./nIf the result is regarded as a two's complement signed integer, then N is set to 1 if the result was negative, and N is set to 0 if the result was positive or zero.
135 Z, bit [30]. Zero condition flag./nSet to 1 if the result of the last flag-setting instruction was zero, and to 0 otherwise./nA result of zero often indicates an equal result from a comparison.
136 C, bit [29]. Carry condition flag./nSet to 1 if the last flag-setting instruction resulted in a carry condition, for example an unsigned overflow on an addition.
137 V, bit [28]. Overflow condition flag./nSet to 1 if the last flag-setting instruction resulted in an overflow condition, for example a signed overflow on an addition.
138 Q, bit [27]. Cumulative saturation bit./nSet to 1 to indicate that overflow or saturation occurred in some instructions.
139 GE[0], bits [19]./nGreater than or Equal flags, for parallel addition and subtraction.
140 GE[1], bits [18]./nGreater than or Equal flags, for parallel addition and subtraction.
141 GE[2], bits [17]./nGreater than or Equal flags, for parallel addition and subtraction.
142 GE[3], bits [16]./nGreater than or Equal flags, for parallel addition and subtraction.
143 E, bit [9]. Endianness state bit./nControls the load and store endianness for data accesses:/n0 - Little-endian operation/n1 - Big-endian operation./nInstruction fetches ignore this bit.
144 A, bit [8]. SError exception mask bit./n0 - Exception not masked./n1 - Exception masked.
145 I, bit [7]. IRQ mask bit./n0 - Exception not masked./n1 - Exception masked.
146 F, bit [6]. FIQ mask bit./n0 - Exception not masked./n1 - Exception masked.
152 AHP, bit [26]. Alternative half-precision control bit./n0 - IEEE half-precision format selected./n1 - Alternative half-precision format selected./nThis bit is used only for conversions between half-precision floating-point and other floating-point formats./nThe data-processing instructions added as part of the FEAT_FP16 extension always use the IEEE half-precision/nformat, and ignore the value of this bit.
153 DN, bit [25]. Default NaN use for NaN propagation./n0 - 1 NaN operands propagate through to the output of a floating-point operation./n1 - Any operation involving one or more NaNs returns the Default NaN./nThis bit has no effect on the output of the FABS and FNEG instructions./nThis bit has no effect on the output of the FMAX, FMAXP, FMAXV, FMIN, FMINP, and FMINV instructions when FPCR.AH is 1.
154 FZ, bit [24]. Flushing denormalized numbers to zero control bit/n0 - If FPCR.AH is 0, the flushing to zero of single-precision and double-precision denormalized inputs to, and outputs of,/n     floating-point instructions not enabled by this control, but other factors might cause the input denormalized numbers to be flushed to zero./n     If FPCR.AH is 1, the flushing to zero of single-precision and double-precision denormalized outputs of/n     floating-point instructions not enabled by this control, but other factors might cause the input denormalized numbers to be flushed to zero./n1 - If FPCR.AH is 0, denormalized single-precision and double-precision inputs to, and outputs from, floating-point instructions are flushed to zero./n     If FPCR.AH is 1, denormalized single-precision and double-precision outputs from floating-point instructions are flushed to zero.
155 FZ16, bit [19]. When FEAT_FP16 is implemented:/nFlushing denormalized numbers to zero control bit on half-precision data-processing instructions./n0 - For some instructions, this bit disables flushing to zero of inputs/n     and outputs that are half-precision denormalized numbers./n1 - Flushing denormalized numbers to zero enabled./n     For some instructions that do not convert a half-precision input to a higher precision output,/n     this bit enables flushing to zero of inputs and outputs that are half-precision denormalized numbers.
156 IDE, bit [15]. Input Denormal floating-point exception trap enable./n0 - Untrapped exception handling selected. If the floating-point exception occurs, the FPSR.IDC bit is set to 1./n1 - Trapped exception handling selected. If the floating-point exception occurs, the PE does not update the FPSR.IDC bit./nWhen the PE is in Streaming SVE mode, and FEAT_SME_FA64 is not implemented or not enabled, the value of FPCR.IDE/nis treated as 0 for all purposes other than a direct read or write of the FPCR./nThe Effective value of this bit controls both scalar and vector floating-point arithmetic.
157 EBF, bit [13]. When FEAT_EBF16 is implemented:/nThe value of this bit controls the numeric behaviors of BFloat16 dot product calculations performed by the/nBFDOT, BFMMLA, BFMOPA, and BFMOPS instructions. If FEAT_SME2 is implemented, this also controls BFVDOT instruction./nWhen ID_AA64ISAR1_EL1.BF16 and ID_AA64ZFR0_EL1.BF16 are 0b0010, the PE supports the FPCR.EBF field. Otherwise, FPCR.EBF is RES0./n0 - These instructions use the standard BFloat16 behaviors./n1 - These instructions use the extended BFloat16 behaviors.
158 IXE, bit [12]. Inexact floating-point exception trap enable./n0 - Untrapped exception handling selected. If the floating-point exception occurs, the FPSR.IXC bit is set to 1./n1 - Trapped exception handling selected. If the floating-point exception occurs, the PE does not update the FPSR.IXC bit./nWhen the PE is in Streaming SVE mode, and FEAT_SME_FA64 is not implemented or not enabled, the value of FPCR.IXE/nis treated as 0 for all purposes other than a direct read or write of the FPCR./nThe Effective value of this bit controls both scalar and vector floating-point arithmetic.
159 UFE, bit [11]. Underflow floating-point exception trap enable./n0 - Untrapped exception handling selected. If the floating-point exception occurs, the FPSR.UFC bit is set to 1./n1 - Trapped exception handling selected. If the floating-point exception occurs and Flush-to-zero is not enabled,/n     the PE does not update the FPSR.UFC bit./nWhen the PE is in Streaming SVE mode, and FEAT_SME_FA64 is not implemented or not enabled, the value of/nFPCR.UFE is treated as 0 for all purposes other than a direct read or write of the FPCR.
160 OFE, bit [10]. Overflow floating-point exception trap enable./n0 - Untrapped exception handling selected. If the floating-point exception occurs, the FPSR.OFC bit is set to 1./n1 - Trapped exception handling selected. If the floating-point exception occurs, the PE does not update the FPSR.OFC bit./nWhen the PE is in Streaming SVE mode, and FEAT_SME_FA64 is not implemented or not enabled, the value of FPCR.OFE/nis treated as 0 for all purposes other than a direct read or write of the FPCR./nThe Effective value of this bit controls both scalar and vector floating-point arithmetic.
161 DZE, bit [9]. Divide by Zero floating-point exception trap enable./n0 - Untrapped exception handling selected. If the floating-point exception occurs, the FPSR.DZC bit is set to 1./n1 - Trapped exception handling selected. If the floating-point exception occurs, the PE does not update the FPSR.DZC bit./nWhen the PE is in Streaming SVE mode, and FEAT_SME_FA64 is not implemented or not enabled, the value of FPCR.DZE/nis treated as 0 for all purposes other than a direct read or write of the FPCR./nThe Effective value of this bit controls both scalar and vector floating-point arithmetic.
162 IOE, bit [8]. Invalid Operation floating-point exception trap enable./n0 - Untrapped exception handling selected. If the floating-point exception occurs, the FPSR.IOC bit is set to 1./n1 - Trapped exception handling selected. If the floating-point exception occurs, the PE does not update the FPSR.IOC bit./nWhen the PE is in Streaming SVE mode, and FEAT_SME_FA64 is not implemented or not enabled, the value of FPCR.IOE/nis treated as 0 for all purposes other than a direct read or write of the FPCR./nThe Effective value of this bit controls both scalar and vector floating-point arithmetic.
163 NEP, bit [2]. When FEAT_AFP is implemented: Controls how the output elements other than the lowest element of the vector/nare determined for Advanced SIMD scalar instructions./n0 - Does not affect how the output elements other than the lowest are determined for Advanced SIMD scalar instructions./n1 - The output elements other than the lowest are taken from the following registers: { ... see manual ... }
164 AH, bit [1] When FEAT_AFP is implemented: Alternate Handling. Controls alternate handling of floating-point numbers./nThe Arm architecture supports two models for handling some of the corner cases of the floating-point behaviors,/nsuch as the nature of flushing of denormalized numbers, the detection of tininess and other exceptions and a range of other behaviors./nThe value of the FPCR.AH bit selects between these models.
165 FIZ, bit [0] When FEAT_AFP is implemented: Flush Inputs to Zero./nControls whether single-precision, double-precision and BFloat16 input operands that are denormalized numbers are flushed to zero./n0 - The flushing to zero of single-precision and double-precision denormalized inputs to floating-point instructions not enabled/n      by this control, but other factors might cause the input denormalized numbers to be flushed to zero./n1 - Denormalized single-precision and double-precision inputs to most floating-point instructions flushed to zero.
166 RMode, bits [23:22]. Rounding Mode control field./n00 - Round to Nearest (RN) mode./n01 - Round towards Plus Infinity (RP) mode./n10 - Round towards Minus Infinity (RM) mode./n11 - Round towards Zero (RZ) mode./nIf FPCR.AH is 1, then the following instructions use Round to Nearest mode regardless of the value of this bit:/n- The FRECPE, FRECPS, FRECPX, FRSQRTE, and FRSQRTS instructions./n- The BFCVT, BFCVTN, BFCVTN2, BFCVTNT, BFMLALB, and BFMLALT instructions.
169 N, bit [31]. Negative condition flag for AArch32 floating-point comparison operations./nAArch64 floating-point comparisons set the PSTATE.N flag instead.
170 Z, bit [30]. Zero condition flag for AArch32 floating-point comparison operations./nAArch64 floating-point comparisons set the PSTATE.Z flag instead.
171 C, bit [29]. Carry condition flag for AArch32 floating-point comparison operations./nAArch64 floating-point comparisons set the PSTATE.C flag instead.
172 V, bit [28]. Overflow condition flag for AArch32 floating-point comparison operations./nAArch64 floating-point comparisons set the PSTATE.V flag instead.
173 QC, bit [27]. Cumulative saturation bit, Advanced SIMD only./nThis bit is set to 1 to indicate that an Advanced SIMD integer operation has saturated since 0 was last written to this bit.
174 IDC, bit [7]. Input Denormal cumulative floating-point exception bit./nThis bit is set to 1 to indicate that the Input Denormal floating-point exception has occurred since 0 was last written to this bit.
175 IXC, bit [4]. Inexact cumulative floating-point exception bit./nThis bit is set to 1 to indicate that the Inexact floating-point exception has occurred since 0 was last written to this bit.
176 UFC, bit [3]. Underflow cumulative floating-point exception bit./nThis bit is set to 1 to indicate that the Underflow floating-point exception has occurred since 0 was last written to this bit.
177 OFC, bit [2]. Overflow cumulative floating-point exception bit./nThis bit is set to 1 to indicate that the Overflow floating-point exception has occurred since 0 was last written to this bit
178 DZC, bit [1]. Divide by Zero cumulative floating-point exception bit./nThis bit is set to 1 to indicate that the Divide by Zero floating-point exception has occurred since 0 was last written to this bit.
179 IOC, bit [0]. Invalid Operation cumulative floating-point exception bit./nThis bit is set to 1 to indicate that the Invalid Operation floating-point exception has occurred since 0 was last written to this bit.
