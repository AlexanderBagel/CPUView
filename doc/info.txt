  FDisassemblerNotification := TIDEDisassemblerNotification.Create;
  FDisassemblerNotification.AddReference;
  FDisassemblerNotification.OnChange  := @DisassemblerChanged;
  BreakpointsNotification.OnAdd    := @BreakPointChanged;
  BreakpointsNotification.OnUpdate := @BreakPointChanged;
  BreakpointsNotification.OnRemove  := @BreakPointChanged;   
  
  
  SourceEditorManagerIntf.RegisterChangeEvent(semEditorOptsChanged, @DoEditorOptsChanged);
  
  



ADisassembler := TFpDebugDebugger(Debugger).FDbgController.CurrentProcess.Disassembler; 

    if AnInfo.InstrType = itJump then begin
      {$PUSH}{$R-}{$Q-}
      AnEntry.TargetAddr := ALineAddr + AnInfo.InstrTargetOffs;
      {$POP}
      Sym := TFpDebugDebugger(Debugger).FDbgController.CurrentProcess.FindProcSymbol(AnEntry.TargetAddr);
      if Sym <> nil then begin
        AnEntry.TargetName := Sym.Name;
        AnEntry.TargetFile := Sym.FileName;
        AnEntry.TargetLine := Sym.Line;
        {$PUSH}{$R-}{$Q-}
        AOffset := int32(int64(AnEntry.TargetAddr) - int64(Sym.Address.Address));
        {$POP}
        if AOffset <> 0 then
          AnEntry.TargetName := AnEntry.TargetName + '+' + IntToStr(AOffset);
        Sym.ReleaseReference;
      end;
    end; 
	
DebuggerIsValid:=(MainIDE.ToolStatus in [itNone, itDebugger]); 	

function TDebugManager.GetAvailableCommands: TDBGCommands;
var
  CurState: TDBGState;
begin
  Result := [];
  if FDebugger <> nil then begin
    Result := FDebugger.Commands;
    CurState := FDebugger.State;
    if CurState = dsError then begin
      CurState := dsStop;
      Result := GetDebuggerClass.SupportedCommandsFor(dsStop);
    end;
  end
  else begin
    Result := GetDebuggerClass.SupportedCommandsFor(dsStop);
    CurState := dsStop;
  end;
end;

смотреть
procedure TDebugManager.UpdateButtonsAndMenuItems; 